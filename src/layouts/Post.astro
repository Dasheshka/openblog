---
import type { CollectionEntry } from "astro:content";
import Common from "@/layouts/Common.astro";
import Tag from "@/components/Tag.astro";
import { siteConfig } from "@/site-config";
import { Image } from "astro:assets";
import { cn } from "@/utils";

const { data, readingTime } = Astro.props;
const {
  title,
  description,
  coverImage,
  tags,
  pubDate,
}: CollectionEntry<"posts">["data"] = data;
const articlePubDate = pubDate.toISOString();
const formattedDate = pubDate.toLocaleDateString(siteConfig.lang, {
  day: "numeric",
  month: "short",
  year: "numeric",
});
const isCoverImageLarge =
  coverImage.width > siteConfig.postPageCoverImageMaxWidth ||
  coverImage.height > siteConfig.postPageCoverImageMaxWidth;
---

<Common
  title={title}
  description={description}
  coverImageSrc={coverImage.src}
  articlePubDate={articlePubDate}
>
  <article data-pagefind-body>
    <header class="mb-3 flex flex-col items-center justify-center gap-6">
      <div class="flex flex-col gap-2">
        <div class="flex items-center justify-center gap-x-1">
          <p class="text-center text-sm text-opacity-50">
            <span>Published</span>
            <time
              class="text-sm font-bold text-opacity-60"
              datetime={articlePubDate}
            >
              {formattedDate}
            </time>
          </p>
          <p class="text-center text-sm font-bold text-opacity-50">
            - {readingTime}
          </p>
        </div>
        <h1 class="text-center text-4xl font-semibold md:pb-2.5 md:text-6xl">
          {title}
        </h1>
      </div>

      {
        tags && (
          <div class="flex flex-wrap items-center justify-center gap-2 gap-y-4 md:gap-5">
            {tags.map((tag) => (
              <Tag tag={tag} />
            ))}
          </div>
        )
      }
    </header>
    <Image
      class={cn(
        "my-8 aspect-[2/1] mx-auto rounded-lg object-cover shadow-default",
        siteConfig.postPageCoverImageAspectRatio,
      )}
      src={coverImage}
      alt=""
      width={isCoverImageLarge
        ? siteConfig.postPageCoverImageMaxWidth
        : undefined}
      height={isCoverImageLarge
        ? siteConfig.postPageCoverImageMaxHeight
        : undefined}
      quality={siteConfig.postPageCoverImageQuality}
      loading="eager"
    />
    <div class="flex flex-col gap-8 lg:flex-row">
      <slot />
    </div>
  </article>
</Common>

<script>
  // Table of contents observer
  const initTocObserver = () => {
    const headings = document.querySelectorAll(
      "#postBody h1, #postBody h2, #postBody h3, #postBody h4, #postBody h5, #postBody h6",
    );

    if (headings.length === 0) return;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const index = document.querySelector(
            `#tableOfContents a[href="#${entry.target.id}"]`,
          );

          if (entry.isIntersecting) {
            index?.classList.remove("bg-slate-200", "dark:bg-slate-800"); // remove bg
            index?.classList.add(
              "bg-indigo-600",
              "dark:bg-indigo-700",
              "text-white",
              "font-bold",
              "transition-colors",
              "duration-200",
            );
          } else {
            index?.classList.add("bg-slate-200", "dark:bg-slate-800"); // add bg
            index?.classList.remove(
              "bg-indigo-600",
              "dark:bg-indigo-700",
              "text-white",
              "font-bold",
              "transition-colors",
              "duration-200",
            );
          }
        });
      },
      {
        threshold: 1,
      },
    );

    headings.forEach((heading) => {
      observer.observe(heading);
    });
  };

  initTocObserver();

  document.addEventListener("astro:after-swap", initTocObserver);
</script>
