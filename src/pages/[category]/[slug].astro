---
import Icon from "@/components/Icon.astro";
import Posts from "@/components/Posts.astro";
import TableOfContents from "@/components/TableOfContents.astro";
import Tags from "@/components/Tags.astro";
import { configs } from "@/configs";
import Common from "@/layouts/Common.astro";
import { getPosts, getRelatedPosts } from "@/lib/content";
import { getReadingTime, t } from "@/utils";
import { Image } from "astro:assets";
import { clsx } from "clsx";

const post = Astro.props;
const {
  body,
  data: { title, description, coverImage, pubDate, category, tags, comments },
  slug,
} = post;
const articlePubDate = pubDate.toISOString();
const formattedDate = pubDate.toLocaleDateString(configs.website.lang, {
  day: "numeric",
  month: "short",
  year: "numeric",
});
const relatedPosts =
  !!configs.postPage.relatedPosts && tags && tags.length
    ? await getRelatedPosts(slug, tags, configs.postPage.relatedPosts)
    : null;
const { Content, headings } = await post.render();

export const getStaticPaths = async () => {
  const posts = await getPosts();

  return posts.map((post) => ({
    params: { category: post.data.category, slug: post.slug },
    props: post,
  }));
};
---

<Common
  {title}
  {description}
  coverImage={coverImage}
  articleCategory={category}
  articleTags={tags}
  {articlePubDate}
>
  <article data-pagefind-body>
    <div class="mb-12">
      <div class="mb-12 flex flex-col items-center text-center">
        <div class="mb-6">
          <p class="font-bold">
            <time datetime={articlePubDate}>
              {formattedDate}
            </time>
          </p>
          <p class="text-sm">
            {getReadingTime(body)}
            {t("ui-website", "text.after-reading-time-number")}
          </p>
        </div>
        <h1 class="text-4xl font-bold lg:text-6xl">
          {title}
        </h1>
        {tags && !!tags.length && <Tags values={tags} />}
      </div>
      <Image
        class={clsx(
          "mx-auto rounded-lg object-cover shadow-default",
          configs.postPage.coverImage.aspect,
        )}
        src={coverImage}
        alt=""
        width={configs.postPage.coverImage.width}
        height={configs.postPage.coverImage.height}
        format="webp"
        quality={configs.postPage.coverImage.quality}
        loading="eager"
      />
    </div>
    <div class="flex flex-col gap-8 lg:flex-row">
      <aside class="hidden w-1/6 lg:block">
        <div class="sticky top-8">
          {headings?.length > 0 && <TableOfContents {headings} />}
        </div>
      </aside>
      <div class="lg:w-4/6">
        <div
          class="prose prose-lg prose-slate max-w-none dark:prose-invert lg:prose-xl prose-img:rounded-lg"
        >
          <Content />
        </div>
      </div>
    </div>
    {
      comments && (
        <div class="mt-12 flex justify-center lg:mx-auto lg:w-4/6 lg:pl-8">
          <a
            class="shadow-default button-state flex min-w-[40%] items-center justify-center gap-2 rounded-lg bg-gradient-to-r from-pink-500 to-violet-500 px-8 py-4 font-bold text-slate-50 lg:-ml-8"
            href={comments}
            target="_blank"
            rel="noopener noreferrer"
          >
            {configs.website.comments.icon && <Icon name="telegram" />}
            <span>{configs.website.comments.label}</span>
          </a>
        </div>
      )
    }
    {
      relatedPosts && (
        <div class="mt-12 lg:mx-auto lg:w-4/6 lg:pl-8">
          <h2 class="mb-6 text-lg font-bold">
            {t("ui-website", "title.related-articles")}
          </h2>
          <Posts posts={relatedPosts} />
        </div>
      )
    }
  </article>
</Common>
