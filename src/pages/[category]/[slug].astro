---
import Posts from "@/components/Posts.astro";
import TableOfContents from "@/components/TableOfContents.astro";
import Tags from "@/components/Tags.astro";
import Common from "@/layouts/Common.astro";
import { getPosts, getRelatedPosts } from "@/lib/content";
import { siteConfig } from "@/site-config";
import { cn, getReadingTime, t } from "@/utils";
import { Image } from "astro:assets";

const post = Astro.props;
const {
  body,
  data: { title, description, coverImage, tags, pubDate },
  slug,
} = post;
const articlePubDate = pubDate.toISOString();
const formattedDate = pubDate.toLocaleDateString(siteConfig.lang, {
  day: "numeric",
  month: "short",
  year: "numeric",
});
const isCoverImageLarge =
  coverImage.width > siteConfig.postPageCoverImageWidth ||
  coverImage.height > siteConfig.postPageCoverImageWidth;
const relatedPosts = tags.length ? await getRelatedPosts(slug, tags) : null;
const { Content, headings } = await post.render();

export const getStaticPaths = async () => {
  const posts = await getPosts();

  return posts.map((post) => ({
    params: { category: post.data.category, slug: post.slug },
    props: post,
  }));
};
---

<Common {title} {description} coverImageSrc={coverImage.src} {articlePubDate}>
  <article data-pagefind-body>
    <div class="mb-12">
      <div class="mb-12 flex flex-col items-center text-center">
        <div class="mb-6">
          <p class="font-bold">
            <time datetime={articlePubDate}>
              {formattedDate}
            </time>
          </p>
          <p class="text-sm">
            {getReadingTime(body)}
            {t("reading-time")}
          </p>
        </div>
        <h1 class="text-4xl font-bold lg:text-6xl">
          {title}
        </h1>
        {
          !!tags.length && (
            <div class="mt-10">
              <Tags values={tags} />
            </div>
          )
        }
      </div>
      <Image
        class={cn(
          "mx-auto rounded-lg object-cover shadow-default",
          siteConfig.postPageCoverImageAspectRatio,
        )}
        src={coverImage}
        alt=""
        width={isCoverImageLarge
          ? siteConfig.postPageCoverImageWidth
          : undefined}
        height={isCoverImageLarge
          ? siteConfig.postPageCoverImageHeight
          : undefined}
        format="webp"
        quality={siteConfig.postPageCoverImageQuality}
        loading="eager"
      />
    </div>
    <div class="flex flex-col gap-8 lg:flex-row">
      <aside class="hidden w-1/6 lg:block">
        <div class="sticky top-8">
          {headings?.length > 0 && <TableOfContents {headings} />}
        </div>
      </aside>
      <div class="lg:w-4/6">
        <div
          class="prose prose-lg prose-slate max-w-none dark:prose-invert lg:prose-xl prose-img:rounded-lg"
        >
          <Content />
        </div>
      </div>
    </div>
    {
      relatedPosts && (
        <div class="mt-12 lg:mx-auto lg:w-4/6 lg:pl-8">
          <h2 class="mb-6 text-lg font-bold">{t("related-articles")}</h2>
          <Posts posts={relatedPosts} />
        </div>
      )
    }
  </article>
</Common>
